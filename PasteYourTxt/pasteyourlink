#!/usr/bin/env bash

################################################################
#   Title: Paste Your Link Bot                                 #
#   Author: Panda Foss                                         #
#   Website: https://pandafoss.github.io/                      #
#   Github: https://github.com/PandaFoss/                      #
#   License: GPLv3 or later                                    #
################################################################

#===  CHECKING TOKENS FILE  ====================================

[[ -f ./tokens ]] && . ./tokens

#== Constants ==================================================

readonly BOT_TOKEN='742680203:AAGEwFBKvMU7oCf448UpllVfVzxCWqmTJAw'
readonly LOGFILE="./history.log"
readonly TIMEOUT="10"
readonly URL="https://api.telegram.org/bot${BOT_TOKEN}"
readonly FILE_URL="https://api.telegram.org/file/bot${BOT_TOKEN}"
readonly BOTNAME="$(curl --silent "${URL}/getMe"               \
                    | jq .result.username                      \
                    | tr -d '"')"

#== Functions ==================================================

################################################################
#   Description: Sending request to telegram api
#   Arguments: Text to be sent
#   Output: none
################################################################
send_text(){
    local TEXT=$( sed 's/^\s\+//g' <<< "${1}" )
    curl --silent "${URL}/sendMessage"                         \
            --max-time "${TIMEOUT}"                            \
            --output /dev/null                                 \
            --data-urlencode "text=${TEXT}"                    \
                --data "chat_id=${CHAT_ID}"                    \
                --data "disable_web_page_preview=${PREVIEW}"   \
                --data "parse_mode=${PARSE_MODE}"
}

# Argument: RESULT_COUNTER
is_txt_file(){
    local MIME_TYPE="$(curl --silent "${URL}/getUpdates"                    \
                  | jq ".result[${1}].message.document.mime_type"           \
                  | cut --delimiter='"' --fields=2                          \
                  | cut --delimiter='/' --fields=1)"
    if [[ "${MIME_TYPE}" == "text" ]]; then
        echo 0
    else
        echo 1
    fi
}

# Argument: RESULT_COUNTER
is_file(){
    local RESULT="$(curl --silent "${URL}/getUpdates"                    \
                    | jq ".result[${1}].message.document")"
    if [[ "${RESULT}" != "null" ]]; then
        echo 0
    else
        echo 1
    fi
}

# Argument: RESULT_COUNTER
file_size(){
    local FILESIZE="$(curl --silent "${URL}/getUpdates"                     \
                        | jq ".result[${1}].message.document.file_size")"
    if [[ "${FILESIZE}" -le 20000000 ]]; then
        echo 0
    else 
        echo 1
    fi
}

# Argument: RESULT_COUNTER
get_file_id(){
    local FILE_ID="$(curl --silent "${URL}/getUpdates"                      \
                  | jq ".result[${1}].message.document.file_id"             \
                  | cut --delimiter='"' --fields=2                          \
                  | cut --delimiter='/' --fields=1)"
    echo "${FILE_ID}"
}

# Argument: FILE_ID
get_file_path(){
    local FILE_PATH="$(curl --silent "${URL}/getFile"                       \
                        --data "file_id=${1}"                               \
                        jq ".result.file_path")"
    echo "${FILE_PATH:1:-1}"
}

# Argument: RESULT_COUNTER
get_msg_text(){
    local TEXT="$(curl --silent "${URL}/getUpdates"                         \
                        | jq ".result[${1}].message.document.text")"
    echo "${TEXT:1:-1}"
}

# get text: curl --silent "${FILE_URL}/${FILE_PATH}"

# Argument: text to return link
haste(){ 
    local LINK="$(curl -X POST -s -d "${1}" "https://hastebin.com/documents"\
                    | awk -F '"' '{print "https://hastebin.com/"$4}')";
    echo "${LINK}"
}

################################################################
#   Description: Offset messages
#   Arguments: none
#   Output: none
################################################################
offset(){

               curl --silent "${URL}/getUpdates"               \
                    --data "offset=$((UPDATE_ID + 1))"         \
                    --output /dev/null

}

################################################################
#   Description: Send unknown command message to Telegram API
#   Arguments: none
#   Output: none
################################################################
unknown_command(){
    local TEXT=$(sed 's/^ \+//' <<<"
                 ⚠️  ***Incorrect command*** ⚠️ 
                ")
    send_text "${TEXT}"
}

################################################################
#   Description: Send start command message to Telegram API
#   Arguments: none
#   Output: none
################################################################
start_command(){
    PREVIEW=1
    local TEXT=$(sed 's/^ \+//' <<<"
            ℹ️ ***INFO***

            Hello! Send me any text message (over 100 characters) or a text file and I'll take care of generating a link using the Hastebin service (similar to Pastebin).

            Questions, suggestions and thanks can be sent using the GitHub repository that I leave below.

            💻 ***DEVELOPER***

            Developed by @PandaFoss
            Source Code: https://github.com/PandaFoss/TelegramBashBots
            ")
    send_text "${TEXT}"

}
#===  END OF FUNCTIONS  ========================================

while sleep 1; do

    PARSE_MODE="markdown"
    RAW_MESSAGE=$( curl -s "${URL}/getUpdates" )
    MSG_COUNT=$( jq '.result | length' <<< "${RAW_MESSAGE}" )

    for i in $( seq 1 "${MSG_COUNT:=0}" ); do

        RESULT_COUNTER=$(( i-1 ))

        UPDATE_ID=$( jq .result[${RESULT_COUNTER}].update_id <<< "${RAW_MESSAGE}"  )
        CHAT_ID=$( jq .result[${RESULT_COUNTER}].message.chat.id <<< "${RAW_MESSAGE}"  )

        #-------------------------------------------------------------------------------
        # Checking that the command was sent to your bot
        #-------------------------------------------------------------------------------
        PRIVATE=$( jq  -r .result[${RESULT_COUNTER}].message.chat.type <<< "${RAW_MESSAGE}"  | sed 's/private/true/' )
        CMD_CHECK=$( jq  -r .result[${RESULT_COUNTER}].message.text <<< "${RAW_MESSAGE}"  )
        if [[ "${CMD_CHECK}" =~ ${BOTNAME/$/\\b} ]]; then
            MESSAGE=$( sed -r "s/${BOTNAME}//" <<< "${CMD_CHECK}" )
        else
            MESSAGE="${CMD_CHECK}"
        fi

        #-------------------------------------------------------------------------------
        # If it is not a command, create a command /message with the message
        #-------------------------------------------------------------------------------
        if [[ ! "${MESSAGE}" =~ ^/[a-zA-Z0-9]+ ]]; then
            MESSAGE=$(sed --regexp-extended "s/^/\/message &/" <<< "${MESSAGE}")
        fi

        ARGS=$( awk '{$1="";print $0}' <<< "${MESSAGE}" | xargs 2>/dev/null )
        COMMAND=$( awk '{print $1}' <<< "${MESSAGE}" )
        SENDER=$( jq -r .result[${RESULT_COUNTER}].message.from.username <<< "${RAW_MESSAGE}" )

        case "${COMMAND}" in
            /start)
                start_command
                ;;
            /message)
                if [[ $(is_txt_file ${RESULT_COUNTER}) -eq 0 ]]; then
                    if [[ $(file_size ${RESULT_COUNTER}) -eq 0 ]]; then
                        FILE_ID="$(get_file_id ${RESULT_COUNTER})"
                        FILE_PATH="$(get_file_path ${FILE_ID})"
                        FILE_TEXT="$(curl --silent "${FILE_URL}/${FILE_PATH}")"
                        HASTE_LINK="$(haste "${FILE_TEXT}")"
                        RAW="$(echo "https://hastebin.com/raw/$(echo "${HASTE_LINK}" | cut --delimiter='/' --fields=4)")"
                        TEXT=$(sed 's/^ \+//' <<<"
                            ***Hastebin:*** ${HASTE_LINK}
                            ***Raw:*** ${RAW}
                        ")
                        send_text "${TEXT}"
                    else
                        TEXT="File is too big! [20MB max.]"
                        send_text "${TEXT}"
                    fi
                else
                    if [[ $(is_file ${RESULT_COUNTER}) -eq 0 ]]; then
                        TEXT="File not supported!"
                        send_text "${TEXT}"
                    else
                        MSG_TEXT="$(get_msg_text ${RESULT_COUNTER})"
                        if [[ "${#MSG_TEXT}" -ge 100 ]]; then
                            HASTE_LINK="$(haste "${MSG_TEXT}")"
                            RAW="$(echo "https://hastebin.com/raw/$(echo "${HASTE_LINK}" | cut --delimiter='/' --fields=4)")"
                            TEXT=$(sed 's/^ \+//' <<<"
                                ***Hastebin:*** ${HASTE_LINK}
                                ***Raw:*** ${RAW}
                            ")
                            send_text "${HASTE_LINK}"
                        else
                            TEXT="The text is too short (less than 100 characters). Try again..."
                            send_text "${TEXT}"
                        fi
                    fi
                fi
                ;;
            /*)
                unknown_command
                ;;
        esac

        offset
    done
done
